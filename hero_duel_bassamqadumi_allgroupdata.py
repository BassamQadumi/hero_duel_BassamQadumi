# -*- coding: utf-8 -*-
"""hero_duel_BassamQadumi_AllGroupData

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1t-CcGedkKCtae4GHVMXeUiaPwUK3NLYb
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.tree import DecisionTreeClassifier, plot_tree
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, accuracy_score

from google.colab import files
uploaded = files.upload()

df = pd.read_csv('hero_duel_all_data.csv')
df.head()

print(df.describe())
print(df['Action_Chosen'].value_counts())
print(df['Player_ID'].value_counts())

plt.figure(figsize=(8, 4))
sns.countplot(data=df, x='Action_Chosen', palette='Set2')
plt.title('Most Used Actions')
plt.show()

plt.figure(figsize=(8, 4))
sns.histplot(data=df, x='Player_Rating', bins=20, kde=True)
plt.title('Distribution of Player Ratings')
plt.show()

features = ['Player_Level', 'Player_Rating', 'Action_Effectiveness', 'Used_Special_Move']
df['Used_Special_Move'] = df['Used_Special_Move'].astype(bool).astype(int)
df['Is_Win'] = df['Is_Win'].astype(bool).astype(int)

X = df[features]
y = df['Is_Win']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = DecisionTreeClassifier(max_depth=4)
model.fit(X_train, y_train)

y_pred = model.predict(X_test)
print(classification_report(y_test, y_pred))
print("Accuracy:", accuracy_score(y_test, y_pred))

plt.figure(figsize=(12, 6))
plot_tree(model, feature_names=features, class_names=['Lose', 'Win'], filled=True)
plt.show()

!pip install streamlit -q
!pip install pyngrok -q

!ngrok config add-authtoken "1teqEyKWMhx3yoYqlJ9P3kfwDq0_75zkWrmrQuSASTyNLByQe"

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# import pandas as pd
# import seaborn as sns
# import matplotlib.pyplot as plt
# from sklearn.tree import DecisionTreeClassifier, plot_tree
# from sklearn.model_selection import train_test_split
# from sklearn.metrics import accuracy_score
# 
# st.set_page_config(page_title="Hero Duel Game Analysis", layout="wide")
# st.title("Hero Duel Game Data Analysis")
# 
# uploaded_file = st.file_uploader("Upload your CSV file", type=["csv"])
# if uploaded_file:
#     df = pd.read_csv(uploaded_file)
#     st.success("File loaded successfully!")
# 
#     st.subheader("Raw Data")
#     st.dataframe(df.head(10))
# 
#     st.subheader("Most Used Actions")
#     fig1, ax1 = plt.subplots()
#     sns.countplot(data=df, x="Action_Chosen", ax=ax1, palette="Set2")
#     st.pyplot(fig1)
# 
#     st.subheader("Player Rating Distribution")
#     fig2, ax2 = plt.subplots()
#     sns.histplot(df['Player_Rating'], bins=20, kde=True, ax=ax2)
#     st.pyplot(fig2)
# 
#     st.subheader("Win Rate by Player")
#     win_counts = df[df['Is_Win'] == True]['Player_ID'].value_counts()
#     fig3, ax3 = plt.subplots()
#     win_counts.plot(kind='bar', color=['#3498db', '#2ecc71'], ax=ax3)
#     ax3.set_title("Win Count by Player")
#     st.pyplot(fig3)
# 
#     st.subheader("Decision Tree: Predicting Win")
#     df['Used_Special_Move'] = df['Used_Special_Move'].astype(bool).astype(int)
#     df['Is_Win'] = df['Is_Win'].astype(bool).astype(int)
#     features = ['Player_Level', 'Player_Rating', 'Action_Effectiveness', 'Used_Special_Move']
#     X = df[features]
#     y = df['Is_Win']
#     X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)
# 
#     model = DecisionTreeClassifier(max_depth=4)
#     model.fit(X_train, y_train)
#     accuracy = accuracy_score(y_test, model.predict(X_test))
#     st.write(f"Model Accuracy: {accuracy:.2f}")
# 
#     fig4, ax4 = plt.subplots(figsize=(12, 6))
#     plot_tree(model, feature_names=features, class_names=["Lose", "Win"], filled=True, ax=ax4)
#     st.pyplot(fig4)

!rm -rf /root/.ngrok2

!ngrok config add-authtoken "1teqEyKWMhx3yoYqlJ9P3kfwDq0_75zkWrmrQuSASTyNLByQe"

from pyngrok import ngrok
public_url = ngrok.connect(8501)
print("Your Streamlit app is live at:", public_url)

!streamlit run app.py &> /dev/null &